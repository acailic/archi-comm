{
  "name": "archi-comm",
  "version": "0.2.1",
  "description": "ArchiComm - Desktop Architecture Communication Platform",
  "type": "module",
  "private": false,
  "author": "Aleksandar Ilic",
  "repository": {
    "type": "git",
    "url": "https://github.com/acailic/archi-comm.git"
  },
  "keywords": [
    "architecture",
    "communication",
    "desktop",
    "tauri",
    "react",
    "design"
  ],
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.2.1",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-aspect-ratio": "^1.1.2",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.3",
    "@radix-ui/react-context-menu": "^2.2.6",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-hover-card": "^1.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-navigation-menu": "^1.2.5",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.1",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toggle": "^1.1.2",
    "@radix-ui/react-toggle-group": "^1.1.2",
    "@radix-ui/react-tooltip": "^1.1.8",
    "@tauri-apps/api": "^1.5.3",
    "@tiptap/extension-color": "^2.1.13",
    "@tiptap/extension-highlight": "^2.26.1",
    "@tiptap/extension-list-item": "^2.1.13",
    "@tiptap/extension-text-style": "^2.1.13",
    "@tiptap/react": "^2.1.13",
    "@tiptap/starter-kit": "^2.1.13",
    "@xyflow/react": "^12.8.4",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "embla-carousel-react": "^8.6.0",
    "framer-motion": "^12.23.12",
    "html-to-image": "^1.11.11",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.487.0",
    "next-themes": "^0.4.6",
    "react": "^18.3.1",
    "react-colorful": "^5.6.1",
    "react-day-picker": "^8.10.1",
    "react-dnd": "^16.0.1",
    "react-dnd-html5-backend": "^16.0.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.55.0",
    "react-resizable-panels": "^2.1.7",
    "recharts": "^2.15.2",
    "sonner": "^2.0.3",
    "tailwind-merge": "^2.3.0",
    "vaul": "^1.1.2",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.35.0",
    "@playwright/test": "^1.47.2",
    "@semantic-release/changelog": "^6.0.3",
    "@semantic-release/exec": "^6.0.3",
    "@semantic-release/git": "^10.0.1",
    "@semantic-release/github": "^10.3.4",
    "@tauri-apps/cli": "^1.5.11",
    "@testing-library/jest-dom": "^6.4.8",
    "@testing-library/react": "^16.0.0",
    "@testing-library/user-event": "^14.5.2",
    "@types/node": "^20.10.0",
    "@types/react": "^18.3.1",
    "@types/react-dom": "^18.3.1",
    "@typescript-eslint/eslint-plugin": "^8.43.0",
    "@typescript-eslint/parser": "^8.43.0",
    "@vitejs/plugin-react-swc": "^3.10.2",
    "@vitest/coverage-v8": "^2.0.5",
    "audit-ci": "^7.1.0",
    "eslint": "^9.35.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-import": "^2.32.0",
    "eslint-plugin-jsx-a11y": "^6.10.2",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-unused-imports": "^4.2.0",
    "husky": "^9.1.7",
    "jsdom": "^24.0.0",
    "lint-staged": "^16.1.6",
    "prettier": "^3.6.2",
    "semantic-release": "^24.0.0",
    "typescript": "^5.6.2",
    "vite": "^6.3.5",
    "vitest": "^2.0.5"
  },
  "scripts": {
    "prepare": "husky",
    "clean": "rm -rf dist node_modules/.vite src-tauri/target/.tauri-cli-cache .vite",
    "clean:all": "rm -rf dist node_modules src-tauri/target .vite && npm install",
    "start": "tauri dev",
    "dev": "vite",
    "dev:clean": "npm run clean && vite",
    "web:dev": "vite",
    "web:build": "vite build",
    "build": "tauri build",
    "build:debug": "tauri build --debug",
    "tauri": "tauri",
    "tauri:dev": "tauri dev",
    "tauri:dev:clean": "npm run clean && tauri dev",
    "tauri:build": "tauri build",
    "tauri:icon": "tauri icon",
    "release": "semantic-release",
    "release:dry": "semantic-release --dry-run --no-ci",
    "release:local": "semantic-release --no-ci",
    "version:sync": "node scripts/sync-versions.js",
    "postversion": "npm run version:sync",
    "test": "vitest",
    "test:run": "vitest run",
    "test:watch": "vitest --watch",
    "test:coverage": "vitest run --coverage",
    "lint": "eslint . --ext .js,.jsx,.ts,.tsx --report-unused-disable-directives --max-warnings 0",
    "lint:precommit": "eslint . --ext .js,.jsx,.ts,.tsx --report-unused-disable-directives --max-warnings 999",
    "lint:fix": "eslint . --ext .js,.jsx,.ts,.tsx --report-unused-disable-directives --max-warnings 0 --fix",
    "lint:file-length": "node scripts/check-file-length.mjs",
    "lint:all": "npm run lint && npm run lint:file-length",
    "format": "prettier --write \"src/**/*.{js,jsx,ts,tsx,css,md,json}\"",
    "format:check": "prettier --check \"src/**/*.{js,jsx,ts,tsx,css,md,json}\"",
    "preview": "tauri build --debug && echo \"Debug build created in src-tauri/target/debug/\"",
    "e2e": "playwright test",
    "e2e:headed": "playwright test --headed",
    "e2e:ci": "playwright install --with-deps && playwright test",
    "type-check": "tsc --noEmit",
    "verify:types": "node -e \"const fs=require('fs'); const pkgs=['react','react-dom']; let missing=[]; for (const p of pkgs){ if(!fs.existsSync('node_modules/@types/'+p)){ missing.push('@types/'+p); } } if(missing.length){ console.error('Missing type packages:', missing.join(', ')); process.exit(1);} else { console.log('Type packages verified'); }\""
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "eslint --cache --fix --max-warnings 999 --report-unused-disable-directives",
      "prettier --write"
    ],
    "*.{css,md,json}": [
      "prettier --write"
    ]
  }
}
