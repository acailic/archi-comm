name: Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.17.0'
  RUST_VERSION: '1.70.0'

jobs:
  # Quality checks that run on all changes
  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run Prettier check
      run: npm run format -- --check
      
    - name: TypeScript type checking
      run: npm run type-check
      
    - name: Check for security vulnerabilities
      run: npm audit --audit-level high
      
  # Unit and integration tests
  test-suite:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test
      
    - name: Run coverage check
      run: npm run test:coverage:check
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage/lcov.info
        fail_ci_if_error: false
        
  # End-to-end testing
  e2e-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Build application
      run: npm run web:build
      
    - name: Run E2E tests
      run: npm run e2e
      
    - name: Upload E2E artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 7
        
  # Build verification
  build-check:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ env.RUST_VERSION }}
        
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build web version
      run: npm run web:build
      
    - name: Build desktop version
      run: npm run build
      
    - name: Check bundle size
      run: |
        echo "Checking bundle size..."
        du -sh dist/
        
  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: success() || failure()
      with:
        sarif_file: 'trivy-results.sarif'
        
  # Performance benchmarks
  performance-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run web:build
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './config/lighthouse.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
  # Accessibility checks
  accessibility-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Run accessibility tests
      run: npm run test:a11y
      
  # All checks must pass
  all-checks:
    runs-on: ubuntu-latest
    needs: [quality-checks, test-suite, e2e-tests, build-check, security-scan, performance-check, accessibility-check]
    if: always()
    
    steps:
    - name: Check all job statuses
      run: |
        echo "Quality checks: ${{ needs.quality-checks.result }}"
        echo "Test suite: ${{ needs.test-suite.result }}"
        echo "E2E tests: ${{ needs.e2e-tests.result }}"
        echo "Build check: ${{ needs.build-check.result }}"
        echo "Security scan: ${{ needs.security-scan.result }}"
        echo "Performance check: ${{ needs.performance-check.result }}"
        echo "Accessibility check: ${{ needs.accessibility-check.result }}"
        
        if [[ "${{ needs.quality-checks.result }}" != "success" ]] || \
           [[ "${{ needs.test-suite.result }}" != "success" ]] || \
           [[ "${{ needs.e2e-tests.result }}" != "success" ]] || \
           [[ "${{ needs.build-check.result }}" != "success" ]]; then
          echo "❌ Critical quality gates failed"
          exit 1
        fi
        
        echo "✅ All quality gates passed"